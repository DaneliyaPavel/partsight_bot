from __future__ import annotations

from pathlib import Path

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from loguru import logger

from bot.config import settings
from bot.service.loader import load_catalog

router = Router()

CAT_PATH = settings.CATALOG_PATH


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ ¬´üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "upload_cat")
async def ask_cat(callback: CallbackQuery) -> None:
    if callback.from_user.id not in settings.ADMINS:
        await callback.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return

    await callback.message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ (*.xlsb). –°—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω."
    )
    await callback.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–∏—ë–º –ª—é–±–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.document)
async def handle_catalog_file(msg: Message) -> None:
    if msg.from_user.id not in settings.ADMINS:
        return

    doc = msg.document
    if not doc.file_name.lower().endswith(".xlsb"):
        await msg.answer("‚ö†Ô∏è –ù—É–∂–µ–Ω —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsb")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmp = Path("/tmp") / doc.file_name
    file_obj = await msg.bot.download(doc)
    tmp.write_bytes(file_obj.read())

    # –∑–∞–º–µ–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
    CAT_PATH.parent.mkdir(exist_ok=True)
    tmp.replace(CAT_PATH)
    logger.info("–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω –∞–¥–º–∏–Ω–æ–º {}", msg.from_user.id)

    # –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à –∏ —Å—á–∏—Ç–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
    pref_set = await load_catalog(force=True)
    await msg.answer(
        f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω, –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤: <b>{len(pref_set):,}</b>", parse_mode="HTML"
    )
