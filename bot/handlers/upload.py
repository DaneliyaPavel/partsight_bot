from __future__ import annotations

import contextlib
import logging
from pathlib import Path

from aiogram import F, Router
from aiogram.enums import ChatAction
from aiogram.types import FSInputFile, Message

from bot.service.generator import build_act
from bot.service.loader import load_catalog
from bot.service.matcher import can_produce
from bot.service.parser import parse_request_docx
from bot.service import last_act
from bot.handlers.inline import get_main_keyboard

router = Router()
log = logging.getLogger(__name__)

TMP_DIR = Path("/tmp")


async def _process_docx(src: Path) -> Path:
    rows = parse_request_docx(src)
    pref = await load_catalog()

    packs = []
    for r in rows:
        possible = "–¥–∞" if can_produce(r["naimenovanie"], pref) else "–Ω–µ—Ç"
        rekom = (
            "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è –∏–ª–∏ —á–µ—Ä—Ç–µ–∂–∞ –∑–∞–≤–æ–¥–∞-–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è"
            if possible == "–¥–∞"
            else "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ"
        )
        packs.append(
            {
                "material": r["material"],
                "naimenovanie": r["naimenovanie"],
                "vozmoznost": possible,
                "rekomendacii": rekom,
            }
        )

    return build_act(packs)


@router.message(F.document.file_name.endswith(".docx"))
async def handle_any_docx(
    message: Message,
) -> None:  # noqa: C901 ‚Äî —É–¥–æ–±–Ω–µ–µ —á–∏—Ç–∞—Ç—å —Ü–µ–ª–∏–∫–æ–º
    user_id = message.from_user.id
    doc = message.document
    tmp_in = TMP_DIR / doc.file_name

    # 1Ô∏è‚É£ –ø–µ—Ä–≤–∞—è ¬´—Å—Ç—É–ø–µ–Ω—å¬ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress: Message = await message.answer("üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –≥–æ—Ç–æ–≤–ª—é—Å—å –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ‚Ä¶")

    try:
        # chat action + –∑–∞–≥—Ä—É–∑–∫–∞
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        await message.bot.download(doc, destination=tmp_in)
        log.info("–ü–æ–ª—É—á–µ–Ω DOCX –æ—Ç %s: %s", user_id, doc.file_name)

        # 2Ô∏è‚É£ –≤—Ç–æ—Ä–∞—è —Å—Ç—É–ø–µ–Ω—å
        await progress.edit_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –∞–∫—Ç‚Ä¶")

        act_path = await _process_docx(tmp_in)

        # 3Ô∏è‚É£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç
        await message.bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_DOCUMENT)
        sent = await message.answer_document(
            document=FSInputFile(act_path),
            caption="‚úÖ –ê–∫—Ç –≥–æ—Ç–æ–≤!",
        )

        # 4Ô∏è‚É£ –∫—ç—à–∏—Ä—É–µ–º file_id
        last_act.set_(user_id, sent.document.file_id)
        log.info("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–∫—Ç: %s (file_id cached)", act_path)

        # 5Ô∏è‚É£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —É–¥–∞–ª—è–µ–º ¬´–ø—Ä–æ–≥—Ä–µ—Å—Å¬ª
        await progress.delete()
        await message.answer(
            "–ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç –∞–∫—Ç:",
            reply_markup=get_main_keyboard(user_id),
        )

    except Exception as exc:  # noqa: BLE001
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∞")
        await progress.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {exc.__class__.__name__}")
    finally:
        with contextlib.suppress(Exception):
            tmp_in.unlink(missing_ok=True)
