import os
os.environ["AIOGRAM_NO_UVLOOP"] = "1"      # —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ —á–∏—Å—Ç–æ–º asyncio

import asyncio
import logging
import configparser
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile

import catalog_loader, parser_docx, matcher, generator_act


# ---------- –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
cfg = configparser.ConfigParser()
cfg.read("config.ini")

proxy_url = cfg["telegram"].get("PROXY_URL", None)  # –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω—É–∂–µ–Ω
bot       = Bot(token=cfg["telegram"]["BOT_TOKEN"], proxy=proxy_url)
dp        = Dispatcher()


# ---------- /start ----------
@dp.message(F.text == "/start")
async def cmd_start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ Word-–∑–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ—á–Ω–µ–º –ó–ò–ü ‚Äî –∏ —è –≤–µ—Ä–Ω—É –∞–∫—Ç —Å –æ—Ü–µ–Ω–∫–æ–π "
        "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (¬´–¥–∞¬ª/¬´–Ω–µ—Ç¬ª)."
    )


# ---------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ----------
@dp.message(F.document)
async def doc_handler(m: Message):
    doc = m.document
    in_path = Path("incoming") / doc.file_name
    in_path.parent.mkdir(exist_ok=True)

    await bot.download(doc, destination=in_path)
    await m.reply(f"–§–∞–π–ª ¬´{in_path.name}¬ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶")

    # —Ç—è–∂—ë–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    act_path = await asyncio.to_thread(process_request, in_path)

    await m.reply_document(
        FSInputFile(act_path),
        caption="–ì–æ—Ç–æ–≤—ã–π –∞–∫—Ç ‚úÖ"
    )


# ---------- –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ----------
def process_request(file_path: Path) -> Path:
    items = parser_docx.parse_request_docx(file_path)

    packets = []
    for it in items:
        can = matcher.can_produce(
            it["naimenovanie"],
            catalog_pref                       # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞
        )
        packets.append(
            dict(
                material     = it["material"],
                naimenovanie = it["naimenovanie"],
                vozmoznost   = "–¥–∞" if can else "–Ω–µ—Ç",
                rekomendacii = (
                    "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ."
                    if can else
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                ),
            )
        )

    # generator_act.build_act ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    return generator_act.build_act(packets)


# ---------- –∑–∞–ø—É—Å–∫ ----------
async def main():
    global catalog_pref
    catalog_pref = await catalog_loader.load_catalog()
    logging.basicConfig(level=logging.INFO)
    print(f"–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω, 5-–±—É–∫–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤: {len(catalog_pref)}")

    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º long-polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
